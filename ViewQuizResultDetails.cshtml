@model FESVIC.ViewModels.QuizStartViewModel

<h2>@Model.SubjectName - Quiz Result</h2>

<p>Total Score:
    <strong>
        @(Model.MaxScore > 0
            ? (Model.TotalScore / Model.MaxScore * 100).ToString("0.00")
            : "0.00")%
        (@Model.TotalScore out of @Model.MaxScore)
    </strong>
</p>

<p>
    Grade:
    <strong>
        @{
            var percent = Model.MaxScore > 0 ? (Model.TotalScore / Model.MaxScore * 100) : 0;
            var grade = percent switch
            {
                >= 70 => "A",
                >= 60 => "B",
                >= 50 => "C",
                >= 40 => "D",
                _ => "F"
            };
        }
        @grade
    </strong>
</p>

@for (int i = 0; i < Model.Questions.Count; i++)
{
    var q = Model.Questions[i];

    <div class="mb-4 p-3 border rounded shadow-sm">
        <h5>Q@(i + 1): @q.Text</h5>

        @for (int optIndex = 0; optIndex < q.Options.Count; optIndex++)
        {
            var option = q.Options[optIndex];
            var isSelected = q.SelectedOption == option;
            var isCorrect = q.CorrectOption == option;

            var labelClass = "form-check-label";

            if (isSelected && isCorrect)
                labelClass += " text-success fw-bold";
            else if (isSelected && !isCorrect)
                labelClass += " text-danger fw-bold";
            else if (!isSelected && isCorrect)
                labelClass += " text-success";

            <div class="form-check">
                <input class="form-check-input" type="radio" disabled
                       checked="@(isSelected ? "checked" : null)" />
                <label class="@labelClass">@option</label>
            </div>
        }

        <p><strong>Mark for this question:</strong> @q.Mark (@(q.IsCorrect ? "Correct" : "Wrong"))</p>
    </div>
}
